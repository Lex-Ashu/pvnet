#pretrain_early_stopping:
#  _target_: pvnet.callbacks.PretrainEarlyStopping
#  monitor: "MAE/val" # name of the logged metric which determines when model is improving
#  mode: "min" # can be "max" or "min"
#  patience: 10 # how many epochs (or val check periods) of not improving until training stops
#  min_delta: 0.001 # minimum change in the monitored metric needed to qualify as an improvement

#pretrain_encoder_freezing:
#  _target_: pvnet.callbacks.PretrainFreeze

early_stopping:
  _target_: pvnet.callbacks.MainEarlyStopping
  monitor: "MAE/val" # name of the logged metric which determines when model is improving
  mode: "min" # can be "max" or "min"
  patience: 10 # how many epochs (or val check periods) of not improving until training stops
  min_delta: 0 # minimum change in the monitored metric needed to qualify as an improvement

learning_rate_monitor:
  _target_: lightning.pytorch.callbacks.LearningRateMonitor
  logging_interval: "epoch"

model_summary:
  _target_: lightning.pytorch.callbacks.ModelSummary
  max_depth: 3

model_checkpoint:
  _target_: lightning.pytorch.callbacks.ModelCheckpoint
  monitor: "MAE/val" # name of the logged metric which determines when model is improving
  mode: "min" # can be "max" or "min"
  save_top_k: 1 # save k best models (determined by above metric)
  save_last: True # additionaly always save model from last epoch
  verbose: False
  dirpath: "checkpoints/pvnet2.1/${model_name}" #${..model_name}
  filename: "epoch_{epoch:03d}"
  auto_insert_metric_name: False
#device_stats_monitor:
#  _target_: lightning.pytorch.callbacks.DeviceStatsMonitor
#  cpu_stats: True
